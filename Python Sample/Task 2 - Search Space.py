#!/usr/bin/env python
# coding: utf-8

# # Task 2 - Search Space
# 
# In this task, you will write a function to find all of the successors of a state in our search space, given a set of allowed letters to swap. The function should have two parameters:
# 
# 1. The name of a text file containing the parent state
# 2. A string containing all letters that are allowed to be swapped. 
#    For example, “ABC” would mean A ↔ B, A ↔ C and B ↔ C are allowed, but nothing else. 
#    Note that we are adding this condition so we can make the state space smaller, which will help with debugging. 
#    This will also be useful when we come to decoding the secret message.
# 
# The function will return a string which includes the number of successor states, followed by a list of these states separated by lines. 
# The successors should be generated by applying the allowed operators in alphabetical order. 
# For example, all of the A swaps (e.g. A ↔ B, A ↔ C, A ↔ D… etc.) should come before the B swaps (e.g. B ↔ C, B ↔ D, B ↔ E etc.). Additionally, A ↔ B should come before A ↔ C., since B comes before C. 
# There is no need to include repeats (e.g. we don’t need B ↔ A, since it is the same as A ↔ B), or operators that do nothing (e.g. A ↔ A always does nothing, and A ↔ B does nothing if the message doesn’t contain any A’s or B’s). 

# In[ ]:


def task2(filename, letters):
    letters = sorted(letters)
    text = ''.join(list(open(filename)))
    groups = [(i, j) for idx, i in enumerate(letters[:-1]) for j in letters[idx+1:]]
    ans = []
    for a, b in groups:
        if a not in text.upper() and b not in text.upper():
          continue
        new_chs = [a if ch == b
           else a.lower() if ch == b.lower()
           else b if ch == a
           else b.lower() if ch == a.lower()
           else ch for ch in text]
        ans.append(''.join(new_chs))
    if len(ans) == 0:
        return '0'
    ans = [str(len(ans)), '\n\n'.join(ans)]
    return '\n'.join(ans)

if __name__ == '__main__':
    # Example function calls below, you can add your own to test the task2 function
    # print(task2('spain.txt', 'ABE'))
    # print(task2('ai.txt', 'XZ'))
    print(task2('cabs.txt', 'ABZD'))
    # print(task2('zz.txt', 'AR'))
